;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;------------------------ MAIN FUNCTION SECTION ----------------
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
org 0
entry_point:
  ; init xf
  ldr a x0
  str a xf

  ; init yf
  ldr b y0
  str b yf

  ; init array access index
  ldr x array_pointer
  ; init loop counter "index"
  ldr b #0
  
loop_perform_move:
  jsr sr_decide_direction
  add x #2 ; increment array access index

  ; loop control
  add b #1
  str b current_index
  sub b max_moves
  jz exit_point
  ; if loop isn't finished
  ; increment loop index and start over
  ldr b current_index
  jmp loop_perform_move

  
  


exit_point:
  hlt

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;-------------------- SUBROUTINE SECTION -----------------------
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
sr_decide_direction:
  nop
  jmp decision_begin

  ;-------- This area is jumped over ----------
    call_right: 
      jsr sr_right
      jmp decision_end
    call_down: 
      jsr sr_down
      jmp decision_end
    call_up: 
      jsr sr_up
      jmp decision_end
    call_left: 
      jsr sr_left
      jmp decision_end
  ;-------- End of jump-over area ----------
  
  decision_begin:
  test_stop_point:
    ldr a 1,x
    jn exit_point ; SPAGHETTI: jumps out of subroutine

  test_right:
    ldr a #0
    sub a 0,x
    jz call_right

  test_down:
    ldr a #1
    sub a 0,x
    jz call_down

  test_left:
    ldr a #128
    sub a 0,x
    jz call_left

  test_up:
    ldr a #129
    sub a 0,x
    jz call_up

  decision_end:
    jmp sr_decide_direction,i

sr_right:
  nop
  ldr a xf
  add a 1,x
  str a xf
  jmp sr_right,i
  
sr_down:
  nop
  ldr a yf
  add a 1,x
  str a yf
  jmp sr_down,i

sr_left:
  nop
  ldr a xf
  sub a 1,x
  str a xf
  jmp sr_left,i

sr_up:
  nop
  ldr a yf
  sub a 1,x
  str a yf
  jmp sr_up,i


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;-------------------- DATA VARIABLES SECTION -------------------
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; maximum number of moves, I wonder if we could 
; use immediate values instead
; though it's good to have this labeled and in memory
array_pointer: db 226
max_moves: db 14
current_index: db 0


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;------------------------ DATA I/O SECTION ---------------------
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; initial robot positions
org 224
 x0: db 0
 y0: db 0

; start of our moves proper
org 226
 moves_array: dab [28]

; final robot position
; 42 is placeholder
org 254
 xf: db 0
 yf: db 0